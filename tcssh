#!/usr/bin/env bash
#
# Copyright 2024 Nick Hastings <nicholaschastings@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

PROG=${0##*/}
declare -A CONFIG=(["columns"]="2"
                  ["cluster_file"]="${HOME}/.clusterssh/clusters"
                  ["debug"]="1"
                  ["ssh_options"]="")
SCRIPT_PATH="${BASH_SOURCE[0]}"
while [ -L "${SCRIPT_PATH}" ]; do
    SCRIPT_DIR="$(cd -P "$(dirname "${SCRIPT_PATH}")" >/dev/null 2>&1 && pwd)"
    SCRIPT_PATH="$(readlink "${SCRIPT_PATH}")"
    [[ ${SCRIPT_PATH} != /* ]] && SCRIPT_PATH="${SCRIPT_DIR}/${SCRIPT_PATH}"
done
SCRIPT_PATH="$(readlink -f "${SCRIPT_PATH}")"

usage() {
    echo "Usage: ${PROG} [options] <cluster|host1 [host2 [host3... ]]>

Cluster ssh using tmux. This differs from other similar scripts by
allowing the user to define the layout by specifying the number of
columns instead of just using the tmux \"tiled\" layout. The hosts
to ssh to can either be explicitly given on the commandline or by
the cluster name or index. The cluster name and/or index can be 
obtained with the -l/--list option.

Options:

  -s SSHOPTS           Options to pass to ssh.

  -c N                 Number of columns of panes.
                       Defaults to 2.

  -f <file>            Location of the cluster configuration file.
                       Defaults to ${CONFIG["cluster_file"]}.

  -l, --list           List available clusters.

  -m, --menu           Open tmux menu of clusters (run inside tmux session).

  -e, --exclude <host> Host in cluster definition to exclude. Only
                       the short hostname is comapared.

  -h, --help           Print this screen.
"
}
function log {
    if [ "${CONFIG["debug"]}" = "0" ]; then
        return
    fi
    logger -t "${PROG}" -p user.debug "$@"
}
function listClusters {
    local clusters
    read -ra clusters <<<"$(grep '^[[:blank:]]*[^[:blank:]#;]' "${CONFIG["cluster_file"]}" | awk '{print $1}' | tr '\n' ' ')"
    for ((i = 0; i < ${#clusters[@]}; i++)); do
        printf "%2d. %s\n" $((i + 1)) "${clusters[${i}]}"
    done
}
function clusterMenu {
    local clusters
    read -ra clusters <<<"$(grep '^[[:blank:]]*[^[:blank:]#;]' "${CONFIG["cluster_file"]}" | awk '{print $1}' | tr '\n' ' ')"
    local args
    declare -a keys=({1..9} 0 {a..z})
    for ((i = 0; i < ${#clusters[@]}; i++)); do
        args+=("${clusters[i]}")
        args+=("${keys[i]}")
        args+=("run \"${SCRIPT_PATH} $((i + 1))\"")
    done
    tmux display-menu -T "Cluster SSH" "${args[@]}"
}

function clusterByNumber {
    local i=$1
    local clusters
    read -ra clusters <<<"$(grep '^[[:blank:]]*[^[:blank:]#;]' "${CONFIG["cluster_file"]}" | awk '{print $1}' | tr '\n' ' ')"
    if [[ $i -lt 1 || $i -gt ${#clusters[@]} ]]; then
        echo "Invalid cluster index $1." 1>&2
        echo "None"
        return 1
    fi
    echo "${clusters[$((i - 1))]}"
    return 0
}

function calcPercent {
    local i=$1
    local n=$2
    local num=$((n - i + 1))
    local dom=$((n - i + 2))
    echo "100 * ${num} / ${dom}" | bc
}

function mkSessionName {
    local sn
    for i in {00..99}; do
        sn=tcssh${i}
        tmux has-session -t "${sn}" 2>/dev/null || break
        sn=""
    done
    if [ "${sn}" = "" ]; then
        echo "Error: could not find free session name" 1>&2
        exit 1
    fi
    echo "${sn}"
}

function mkWindowIndex {
    # Get list of all the windows in this session
    local warr
    read -ra warr <<<"$(tmux list-windows | cut -f1 -d: | tr '\n' ' ')"

    # Loop over possible window indices to find one that is not already
    # used.
    for i in {1..99}; do
        local ok=1
        for j in "${warr[@]}"; do
            if [ "${i}" = "${j}" ]; then
                ok=0
                continue
            fi
        done
        if [ "${ok}" = "1" ]; then
            echo "${i}"
            return 0
        fi
    done
    echo "Can not find free window name." 1>&2
    exit 1
}

function readConfig {
    local value
    log "Reading config"
    for key in "${!CONFIG[@]}" ; do
        value="$(tmux show-option -gv "@tmux_cssh_${key}" 2>/dev/null)"
        log "Got ${key} = ${value} from config"
        # If substring "file" is in variable expand ~ to $HOME
        if [[ "${key}" == *"file"* ]]; then
            value="${value/#~/${HOME}}"
        fi
        if [ "${value}" != "" ]; then
            CONFIG["${key}"]="${value}"
            value=""
        fi
    done
}
function main {
    log "main()"
    local harr
    read -ra harr <<<"$1"
    log "harr =" "${harr[@]}"
    local sshopts
    read -ra sshopts <<<"$2"
    log "sshopts =" "${sshopts[@]}"

    local nc="${CONFIG["columns"]}"
    log "nc = ${nc}"
    local hindex=0
    local nhosts=${#harr[@]}
    if [ "${nhosts}" -lt "${nc}" ]; then
        nc=${nhosts}
    fi
    local sn=""

    # Check if we are already in a tmux session
    if [ "${TMUX}" != "" ]; then
        sn=$(tmux display-message -p '#S')
    fi
    local wi=""

    # Number of panes needs to be >= nhosts and divisible by the number of columns
    local np
    [[ $((nhosts % nc)) -eq 0 ]] && np=${nhosts} || np=$(echo "${nhosts}+${nc}-${nhosts}%${nc}" | bc)
    # Number of rows
    local nr
    nr=$((np / nc))

    log "nhosts = ${nhosts}, np = ${np}, nc = ${nc}, nr = ${nr}"
    # Loop over the panes
    local tmuxopts tp per
    for ((col = 1; col <= nc; col++)); do
        for ((row = 1; row <= nr; row++)); do
            if [[ ${col} -eq 1 && ${row} -eq 1 ]]; then
                if [ "${sn}" != "" ]; then
                    # Use the current session
                    wi=$(mkWindowIndex)
                    tmuxopts=("new-window" "-t" "${sn}:${wi}")
                else
                    # Make and use a new session
                    sn=$(mkSessionName)
                    tmuxopts=("new-session" "-d" "-s" "${sn}")
                fi
            elif [ "${col}" -eq "1" ]; then
                tp=$((row - 1))
                per=$(calcPercent "${row}" "${nr}")
                tmuxopts=("split-window" "-t" "${sn}:${wi}.${tp}" "-v" "-l" "${per}%")
            else
                tp=$((row * col - 1))
                per=$(calcPercent "${col}" "${nc}")
                tmuxopts=("split-window" "-t" "${sn}:${wi}.${tp}" "-h" "-l" "${per}%")
            fi
            tmux "${tmuxopts[@]}" ssh "${sshopts[@]}" "${harr[$((hindex++))]}"
            if [ "${wi}" = "" ]; then
                wi=$(tmux display-message -p '#{window_index}')
            fi
            ((npanes++))
            if [ "${npanes}" -eq "${nhosts}" ]; then
                break
            fi
        done
    done

    tmux rename-window "${CLUSTER}"
    tmux set-window-option -t "${sn}" synchronize-panes on

    if [ "${TMUX}" = "" ]; then
        tmux attach -t "${sn}"
    fi
}
readConfig
declare -a excludes
declare -a HOSTS
while [ "$1" != "" ]; do
    log "\$1 is $1"
    case $1 in
    -s)
        CONFIG["ssh_options"]="$2"
        shift
        ;;
    -c)
        CONFIG["columns"]="$2"
        shift
        ;;
    -f)
        CONFIG["cluster_file"]="$2"
        shift
        ;;
    -l | --list)
        listClusters
        exit 0
        ;;
    -m | --menu)
        clusterMenu
        exit 0
        ;;
    -e | --exclude)
        excludes+=("$2")
        shift
        ;;
    -d | --debug)
        CONFIG["debug"]="$2"
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    *)
        HOSTS+=("$1")
        ;;
    esac
    shift
done

if [ ${#HOSTS} -lt 1 ]; then
    usage
    exit 1
fi

log "Number of hosts is ${#HOSTS}"
if [ ${#HOSTS[@]} -eq 1 ]; then
    # Single host, must actually be a cluster name or index. Get HOSTS from cluster
    if [[ ${HOSTS[0]} =~ ^[0-9]+$ ]]; then
        # Is an integer, must be an index
        CLUSTER=$(clusterByNumber "${HOSTS[0]}")
    else
        # Must be a cluster name
        CLUSTER=${HOSTS[0]}
    fi
    HOSTS_STRING="$(sed -n "s/^${CLUSTER} //p" <"${CONFIG["cluster_file"]}")"
    if [ "${HOSTS_STRING}" = "" ]; then
        echo "Cluster ${CLUSTER} not found in ${CONFIG["cluster_file"]}"
        exit 2
    fi
    HOSTS=("${HOSTS_STRING}")
fi

# Remove excluded HOSTS
WANTEDHOSTS=""
for host in "${HOSTS[@]}"; do
    exclude=""
    for exhost in "${excludes[@]}"; do
        if [ "${exhost%%.*}" = "${host%%.*}" ]; then
            exclude=1
            break
        fi
    done
    if [ "${exclude}" = "" ]; then
        WANTEDHOSTS="${WANTEDHOSTS} ${host}"
    fi
done

main "${WANTEDHOSTS}" "${CONFIG["ssh_options"]}"
