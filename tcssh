#!/usr/bin/env bash
PROG=${0##*/}
DEBUG=0
CLUSTERFILE="${HOME}/.clusterssh/clusters"
NCOL="2"
SCRIPT_PATH="${BASH_SOURCE[0]}"
while [ -L "${SCRIPT_PATH}" ]; do
    SCRIPT_DIR="$(cd -P "$(dirname "${SCRIPT_PATH}")" >/dev/null 2>&1 && pwd)"
    SCRIPT_PATH="$(readlink "${SCRIPT_PATH}")"
    [[ ${SCRIPT_PATH} != /* ]] && SCRIPT_PATH="${SCRIPT_DIR}/${SCRIPT_PATH}"
done
SCRIPT_PATH="$(readlink -f "${SCRIPT_PATH}")"

usage() {
    echo "Usage: $PROG [options] <cluster>

Cluster ssh using tmux. This differs from other similar scripts by
allowing the user to define the layout by specifying the number of
columns instead of just using the tmux \"tiled\" layout. The argument
<cluster> is either a named cluster or the index corresponding to one
as provided by the -l/--list option.

Options:

  -s SSHOPTS           Options to pass to ssh.

  -c N                 Number of columns of panes.
                       Defaults to 2.

  -f <file>            Location of the cluster configuration file.
                       Defaults to ${CLUSTERFILE}.

  -l, --list           List available clusters.

  -m, --menu           Open tmux menu of clusters (run inside tmux session).

  -e, --exclude <host> Host in cluster definition to exclude. Only
                       the short hostname is comapared.

  -h, --help           Print this screen.
"
}
function log {
    if [ "$DEBUG" = "0" ] ; then
        return
    fi
    logger -t "${PROG}" -- "$@"
}
function listClusters {
    local clusters
    read -ra clusters <<< "$(grep '^[[:blank:]]*[^[:blank:]#;]' "${CLUSTERFILE}" | awk '{print $1}'| tr '\n' ' ')"
    for (( i=0; i < ${#clusters[@]}; i++ )) ; do
	printf "%2d. %s\n" $((i+1)) "${clusters[$i]}"
    done
}
function clusterMenu {
    local clusters
    read -ra clusters <<< "$(grep '^[[:blank:]]*[^[:blank:]#;]' "${CLUSTERFILE}" | awk '{print $1}'| tr '\n' ' ')"
    local args
    for (( i=0; i < ${#clusters[@]}; i++ )) ; do
        args+=("${clusters[$i]}")
        args+=("$i")
        args+=("run \"${SCRIPT_PATH} $((i+1))\"")
    done
    tmux display-menu -T "Cluster SSH" "${args[@]}"
}

function clusterByNumber {
    local i=$1
    local clusters
    read -ra clusters <<< "$(grep '^[[:blank:]]*[^[:blank:]#;]' "${CLUSTERFILE}" | awk '{print $1}'| tr '\n' ' ')"
    if [[ $i -lt 1 || $i -gt ${#clusters[@]} ]] ; then
	echo "Invalid cluster index $1." 1>&2
	echo "None"
        return 1
    fi
    echo "${clusters[$((i-1))]}"
    return 0
}

function calcPercent {
    local i=$1
    local n=$2
    local num=$((n-i+1))
    local dom=$((n-i+2))
    echo "100 * $num / $dom" | bc
}

function mkSessionName {
    local sn
    for i in {00..99} ; do
        sn=tcssh${i}
        tmux has-session -t "$sn" 2> /dev/null || break
        sn=""
    done
    if [ "$sn" = "" ] ; then
        echo "Error: could not find free session name" 1>&2
        exit 1
    fi
    echo "$sn"
}

function mkWindowIndex {
    # Get list of all the windows in this session
    local warr
    read -ra warr <<< "$(tmux list-windows | cut -f1 -d: | tr '\n' ' ')"

    # Loop over possible window indices to find one that is not already
    # used.
    for i in {1..99} ; do
	local ok=1
	for j in "${warr[@]}" ;do
	    if [ "$i" = "$j" ] ; then
		ok=0
		continue
	    fi
	done
	if [ "$ok" = "1" ]; then
	    echo "$i"
	    return 0
	fi
    done
    echo "Can not find free window name." 1>&2
    exit 1
}

function readConfig {
    local columns=""
    log "Reading config"
    columns="$(tmux show-option -gv '@tmux_cssh_columns')"
    log "Got columns = ${columns} from config"
    if [ "$columns" != "" ]; then
        NCOL="$columns"
        log "Set NCOL to $columns"
    fi
}
function main {
    log "main()"
    local harr
    read -ra harr <<< "$1"
    log "harr =" "${harr[@]}"
    local sshopts
    read -ra sshopts <<< "$2"
    log "sshopts =" "${sshopts[@]}"

    local nc="$NCOL"
    log "nc = $nc"
    local hindex=0
    local nhosts=${#harr[@]}
    local sn=""

    # Check if we are already in a tmux session
    if [ "$TMUX" != "" ] ; then
       sn=$(tmux display-message -p '#S')
    fi
    local wi=""

    # Number of panes needs to be >= nhosts and divisible by the number of columns
    local np
    [[ $((nhosts%nc)) -eq 0 ]] && np=$nhosts || np=$(echo "$nhosts+$nc-$nhosts%$nc" | bc)
    # Number of rows
    local nr
    nr=$((np/nc))

    log "nhosts = ${nhosts}, np = ${np}, nc = ${nc}, nr = ${nr}"
    # Loop over the panes
    local tmuxopts tp per
    for (( col=1; col<=nc ; col++ )) ; do
	for (( row=1; row<=nr; row++ )) ; do
	    if [[ $col -eq 1 && $row -eq 1 ]] ; then
		if [ "$sn" != "" ] ; then
		    # Use the current session
		    wi=$(mkWindowIndex)
		    tmuxopts=("new-window" "-t" "${sn}:${wi}")
		else
		    # Make and use a new session
		    sn=$(mkSessionName)
		    tmuxopts=("new-session" "-d" "-s" "$sn")
		fi
	    elif [ "$col" -eq "1" ] ; then
		tp=$((row-1))
		per=$(calcPercent "$row" "$nr")
		tmuxopts=("split-window" "-t" "${sn}:${wi}.${tp}" "-v" "-l" "${per}%")
	    else
		tp=$((row*col-1))
		per=$(calcPercent "$col" "$nc")
		tmuxopts=("split-window" "-t" "${sn}:${wi}.${tp}" "-h" "-l" "${per}%")
	    fi
	    tmux "${tmuxopts[@]}" ssh "${sshopts[@]}" "${harr[$((hindex++))]}"
	    if [ "$wi" = "" ] ; then
		wi=$(tmux display-message -p '#{window_index}')
	    fi
	    ((npanes++))
	    if [ "$npanes" -eq "$nhosts" ] ; then
		break
	    fi
	done
    done

    tmux rename-window "$CLUSTER"
    tmux set-window-option -t "$sn" synchronize-panes on

    if [ "$TMUX" = "" ] ; then
	tmux attach -t "$sn"
    fi
}

SSHOPTS=""
CLUSTER=""
readConfig
declare -a excludes
while [ "$1" != "" ] ; do
    case $1 in
	-s)
	    SSHOPTS="$2"
	    shift
	    ;;
	-c)
	    COLUMNS="$2"
	    shift
	    ;;
	-l|--list)
	    listClusters
	    exit 0
            ;;
	-m|--menu)
	    clusterMenu
	    exit 0
	    ;;
	-e|--exclude)
	    excludes+=("$2")
	    shift
	    ;;
	-d|--debug)
	    DEBUG=1
	    ;;
	-h|--help)
	    usage
	    exit 0
	    ;;
	*)
	    CLUSTER=$1
	    shift
	    if [[ $CLUSTER =~ ^[0-9]+$ ]] ; then
		CLUSTER=$(clusterByNumber $((CLUSTER)))
		if [ "$?" != "0" ] ; then
		    exit $?
		fi
	    fi
	    ;;
    esac
    shift
done

if [ "$CLUSTER" = "" ] ; then
    usage
    exit 1
fi

# Get hosts from cluster name
hosts="$(sed -n < "${CLUSTERFILE}" "s/^$CLUSTER //p")"
if [ "$hosts" = "" ] ; then
    echo "Cluster $CLUSTER not found in $CLUSTERFILE" 1>&2
    exit 2
fi

# Remove excluded hosts
wantedhosts=""
for host in $hosts ; do
    exclude=""
    for exhost in "${excludes[@]}" ; do
	if [ "${exhost%%.*}" = "${host%%.*}" ] ; then
	    exclude=1
	    break
	fi
    done
    if [ "$exclude" = "" ] ; then
	wantedhosts="${wantedhosts}${host} "
    fi
done

main "$WANTEDHOSTS" "$SSHOPTS"
